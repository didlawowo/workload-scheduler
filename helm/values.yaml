image:
  repository: fizzbuzz2/workload-scheduler
  tag: "2d43dff"
  pullPolicy: "Always"
  pullSecrets:
  - name: registry-credentials
domainName: "workload-scheduler.dc-tech.work"
autoscaling:
  enabled: false
replicas: 1
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 25%
    maxSurge: 25%
serviceAccount:
  create: true
  name: workload-scheduler
cronJobs:
  call-api:
    enabled: true
    schedule: "0 */3 * * *"
    image: alpine/curl
    imagePullPolicy: Always
    command: [ "/bin/bash" ]
    args:
    - -c
    - curl -X POST http://workload-sheduler:8000/delete-rs
    restartPolicy: OnFailure
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 50m
        memory: 128Mi
    nodeSelector:
      kubernetes.io/arch: "arm64"
    env: []
    envFrom: []
    volumes: []
    volumeMounts: []
application:
  ports:
  - name: http
    containerPort: 8000
    protocol: TCP
  containerName: workload
  command: []
  args: []
service:
  port: 80
  targetPort: 8000
  type: ClusterIP
  portName: http
resources:
  limits:
    cpu: 700m
    memory: 256Mi
  requests:
    cpu: 250m
    memory: 128Mi
env: []
  # - name: ARGO_USERNAME
  #   value: "admin"
  # - name: ARGO_PASSWORD
  #   value: "admin"
  # - name: ARGOCD_API_URL
  #   value: "http://argo-argocd-server.kube-infra.svc.cluster.local/api/v1"
  # - name: UNLEASH_API_TOKEN
  #   value: "user:43fe3a38a9db8cd7649c47e2f9c6e1dcdaca2b563a3eded8d47b36fe"
# - name: UNLEASH_API_URL
#   value: "http://unleash.kube-infra.svc.cluster.local:4242/api/"
volumeMounts: []
volumes: []
envFrom: []
nodeSelector: {}
livenessProbe:
  httpGet:
    scheme: HTTP
    path: /live
    port: 8000
  initialDelaySeconds: 5
  periodSeconds: 30
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3
readinessProbe:
  httpGet:
    scheme: HTTP
    path: /health
    port: 8000
  initialDelaySeconds: 5
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3
