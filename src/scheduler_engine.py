import asyncio
from datetime import datetime
import pytz
from loguru import logger
from croniter import croniter
from core.models import WorkloadSchedule, ScheduleStatus
from utils.helpers import RetryableAsyncClient
import os
from icecream import ic  # noqa: F401
from types import SimpleNamespace


class SchedulerEngine:
    """
    Moteur de scheduling qui v√©rifie les expressions cron pour d√©marrer/arr√™ter les workloads.

    Attributes:
        check_interval: Intervalle (en secondes) entre chaque v√©rification des programmations
        running: Indicateur si le scheduleur est en cours d'ex√©cution
        _task: T√¢che asyncio pour le processus en arri√®re-plan
    """

    def __init__(self, check_interval: int = 60):
        """
        Initialise le moteur de scheduling.

        Args:
            check_interval: Intervalle de v√©rification en secondes (par d√©faut: 60)
        """
        self.check_interval = check_interval
        self.running = False
        self._task = None
        self.timezone = pytz.timezone(os.getenv("TIMEZONE", "Europe/Paris"))  
        self.client = RetryableAsyncClient()

    async def start(self):
        """
        D√©marre le moteur de scheduling en arri√®re-plan.
        """
        if self.running:
            logger.warning("Le scheduler est d√©j√† en cours d'ex√©cution")
            return

        self.running = True
        self._task = asyncio.create_task(self._run())
        logger.info(
            f"‚è∞ D√©marrage du moteur de scheduling (intervalle: {self.check_interval}s)"
        )

    async def stop(self):
        """
        Arr√™te le moteur de scheduling.
        """
        if not self.running:
            logger.warning("Le scheduler n'est pas en cours d'ex√©cution")
            return

        self.running = False
        if self._task:
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        logger.info("üõë Arr√™t du moteur de scheduling")

    async def _run(self):
        """
        Boucle principale du moteur de scheduling.
        """
        try:
            while self.running:
                try:
                    await self._check_schedules()
                    await asyncio.sleep(self.check_interval)
                except Exception as e:
                    logger.error(f"Erreur dans la boucle de scheduling: {e}")
                    logger.exception(e)
                    await asyncio.sleep(self.check_interval)
        except asyncio.CancelledError:
            logger.info("T√¢che de scheduling annul√©e")
            raise

    async def _check_schedules(self):
        """
        V√©rifie toutes les programmations et ex√©cute les actions n√©cessaires.
        """
        try:
            schedules = await self.client.get(url=f"{os.getenv('API_URL')}/schedules")
            schedules_dict = schedules.json()
            
            logger.info(f"V√©rification de {len(schedules_dict)} programmations √† {datetime.now(self.timezone).strftime('%H:%M:%S')}")
            
            if not schedules_dict:
                logger.info("Aucune programmation trouv√©e dans la base de donn√©es")
                return
                
            # Convertir les dictionnaires en SimpleNamespace
            schedule_object = [SimpleNamespace(**item) for item in schedules_dict]
            
            now = datetime.now(self.timezone)
            
            for schedule in schedule_object:
                await self._process_schedule(schedule, now)
                
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification des programmations: {e}")
            logger.exception(e)

    async def _process_schedule(self, schedule: WorkloadSchedule, now: datetime):
        """
        Traite une programmation individuelle.

        Args:
            schedule: La programmation √† traiter
            now: L'heure actuelle
        """
        
        try:
            should_start = self._should_execute(schedule.cron_start, now)
            should_stop = self._should_execute(schedule.cron_stop, now)

            logger.debug(
                f"Programmation {schedule.id} ({schedule.name}, UID: {schedule.uid}): status={schedule.status}, active={schedule.active}, should_start={should_start}, should_stop={should_stop}"
            )
            logger.debug(
                f"cron_start: {schedule.cron_start}, cron_stop: {schedule.cron_stop}"
            )

            if should_start and (schedule.status == ScheduleStatus.NOT_SCHEDULED or not schedule.active):
                logger.info(
                    f"D√©clenchement du d√©marrage pour {schedule.name} (ID: {schedule.id}, UID: {schedule.uid})"
                )
                await self._start_workload(schedule)
            elif should_stop and schedule.status == ScheduleStatus.SCHEDULED and schedule.active:
                logger.info(
                    f"D√©clenchement de l'arr√™t pour {schedule.name} (ID: {schedule.id}, UID: {schedule.uid})"
                )
                await self._stop_workload(schedule)
            elif not schedule.active:
                logger.debug(
                    f"Programmation {schedule.id} ({schedule.name}, UID: {schedule.uid}) inactive, mais v√©rifi√©e pour un √©ventuel d√©marrage"
                )

        except Exception as e:
            logger.error(
                f"Erreur lors du traitement de la programmation {schedule.id}: {e}"
            )
            logger.exception(e)

    def _should_execute(self, cron_expression: str, now: datetime) -> bool:
        """
        V√©rifie si une expression cron doit √™tre ex√©cut√©e.

        Args:
            cron_expression: L'expression cron √† v√©rifier
            now: L'heure actuelle
        Returns:
            True si l'expression doit √™tre ex√©cut√©e, False sinon
        """
        if not cron_expression:
            return False

        try:
            cron = croniter(cron_expression, now)
            next_dt = cron.get_next(datetime)
            cron.get_prev()
            prev_dt = cron.get_prev(datetime)
            delta = (now - prev_dt).total_seconds()
            next_delta = (next_dt - now).total_seconds()

            logger.debug(
                f"Expression cron '{cron_expression}': "
                f"pr√©c√©dente={prev_dt}, "
                f"actuelle={now}, "
                f"prochaine={next_dt}, "
                f"delta={delta}s, "
                f"intervalle={self.check_interval}s"
            )
            return (0 <= delta < self.check_interval) or (
                0 <= next_delta < self.check_interval
            )

        except Exception as e:
            logger.error(
                f"Erreur lors du parsing de l'expression cron '{cron_expression}': {e}"
            )
            return False

    async def _start_workload(self, schedule):
        """
        D√©marre un workload en utilisant son UID.
        """
        try:
            logger.info(f"üöÄ D√©marrage du workload: {schedule.name} (ID: {schedule.id}, UID: {schedule.uid})")
            
            result = await self.client.get(url=f"{os.getenv('API_URL')}/manage/up/deploy/{schedule.uid}")
            result_data = result.json()
            
            if result_data.get("status") == "success":
                # Cr√©er un dictionnaire pour la mise √† jour
                update_data = {
                    "active": True,
                    "status": ScheduleStatus.SCHEDULED.value,
                    "last_update": datetime.now(self.timezone).isoformat(),
                    "cron_start": schedule.cron_start if hasattr(schedule, 'cron_start') else None,
                    "cron_stop": schedule.cron_stop if hasattr(schedule, 'cron_stop') else None
                }
                
                await self.client.put(
                    url=f"{os.getenv('API_URL')}/schedules/{schedule.id}",
                    json=update_data
                )
                logger.success(f"‚úÖ Workload d√©marr√© avec succ√®s: {schedule.name}")
            else:
                logger.error(f"‚ùå √âchec du d√©marrage: {result_data.get('message', 'Unknown error')}")
                
        except Exception as e:
            logger.error(f"Erreur lors du d√©marrage: {e}")
            logger.exception(e)
            
    async def _stop_workload(self, schedule):
        """
        Arr√™te un workload en utilisant son UID.

        Args:
            schedule: La programmation du workload √† arr√™ter
        """
        try:
            logger.info(
                f"üõë Arr√™t du workload: {schedule.name} (ID: {schedule.id}, UID: {schedule.uid})"
            )
            
            result = await self.client.get(
                url=f"{os.getenv('API_URL')}/manage/down/deploy/{schedule.uid}"
            )
            result_data = result.json()

            if result_data.get("status") == "success":
                update_data = {
                    "active": False,
                    "status": ScheduleStatus.SCHEDULED.value,
                    "last_update": datetime.now(self.timezone).isoformat(),
                    "cron_start": schedule.cron_start if hasattr(schedule, 'cron_start') else None,
                    "cron_stop": schedule.cron_stop if hasattr(schedule, 'cron_stop') else None
                }
                
                await self.client.put(
                    url=f"{os.getenv('API_URL')}/schedules/{schedule.id}",
                    json=update_data,
                )
                logger.success(
                    f"‚úÖ Workload arr√™t√© avec succ√®s: {schedule.name} (UID: {schedule.uid})"
                )
            else:
                logger.error(
                    f"‚ùå √âchec de l'arr√™t du workload {schedule.name} (UID: {schedule.uid}): {result_data.get('message', 'Unknown error')}"
                )

        except Exception as e:
            logger.error(
                f"Erreur lors de l'arr√™t du workload {schedule.name} (UID: {schedule.uid}): {e}"
            )
            logger.exception(e)


if __name__ == "__main__":

    async def main():
        # Cr√©er une instance du scheduler
        scheduler = SchedulerEngine(check_interval=60)

        try:
            # D√©marrer le scheduler
            await scheduler.start()

            # Garder le programme en cours d'ex√©cution
            while scheduler.running:
                await asyncio.sleep(1)

        except KeyboardInterrupt:
            logger.info("‚ö†Ô∏è Interruption par l'utilisateur (Ctrl+C)")
        except Exception as e:
            logger.error(f"‚ùå Erreur inattendue: {e}")
            logger.exception(e)
        finally:
            # Arr√™ter proprement le scheduler
            await scheduler.stop()
            logger.info("üëã Programme termin√©")

    # Lancer la boucle d'√©v√©nements asyncio
    asyncio.run(main())
